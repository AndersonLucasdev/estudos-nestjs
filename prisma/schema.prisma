generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id             Int             @id @default(autoincrement())
  username       String          @db.VarChar(50)
  name           String          @db.VarChar(100)
  Bio            String?
  email          String          @db.VarChar(100)
  password       String          @db.VarChar(60)
  phone          String?         @db.VarChar(20)
  creationDate   DateTime        @default(now()) @db.Timestamp(6)
  lastUpdateDate DateTime        @updatedAt
  gender         Gender?
  birthDate      DateTime?       @db.Date
  profilePhoto   String?
  comments       Comment[]
  commentLikes   CommentLike[]
  posts          Post[]
  postLikes      PostLike[]
  following      UserFollowers[] @relation("Following")
  followers      UserFollowers[] @relation("UserFollowers")
}

model Post {
  id              Int        @id @default(autoincrement())
  userId          Int
  image           String?
  description     String
  creationDate    DateTime   @default(now()) @db.Timestamp(6)
  disableComments Boolean    @default(false)
  likes           Int        @default(0)
  comments        Comment[]
  user            User       @relation(fields: [userId], references: [id])
  postLikes       PostLike[]
}

model Comment {
  id           Int           @id @default(autoincrement())
  postId       Int
  userId       Int
  content      String
  creationDate DateTime      @default(now()) @db.Timestamp(6)
  likes        Int           @default(0)
  post         Post          @relation(fields: [postId], references: [id])
  user         User          @relation(fields: [userId], references: [id])
  commentLikes CommentLike[]
}

model CommentLike {
  id        Int     @id @default(autoincrement())
  commentId Int
  userId    Int
  comment   Comment @relation(fields: [commentId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
}

model PostLike {
  id     Int  @id @default(autoincrement())
  postId Int
  userId Int
  post   Post @relation(fields: [postId], references: [id])
  user   User @relation(fields: [userId], references: [id])
}

model UserFollowers {
  id            Int  @id @default(autoincrement())
  userId        Int
  relatedUserId Int
  relatedUser   User @relation("Following", fields: [relatedUserId], references: [id])
  user          User @relation("UserFollowers", fields: [userId], references: [id])

  @@unique([userId, relatedUserId])
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
