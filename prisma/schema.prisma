generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id               Int             @id @default(autoincrement())
  username         String          @db.VarChar(50)
  name             String          @db.VarChar(100)
  email            String          @db.VarChar(100)
  password         String          @db.VarChar(60)
  confirmPassword  String          @db.VarChar(60)
  creationDate     DateTime        @default(now()) @db.Timestamp(6)
  lastUpdateDate   DateTime        @updatedAt
  birthDate        DateTime?       @db.Date
  phone            String?         @db.VarChar(20)
  Bio              String?
  profilePhoto     String?
  connectionId     String?
  gender           Gender?
  comments         Comment[]
  commentLikes     CommentLike[]
  posts            Post[]
  postLikes        PostLike[]
  notifications    Notification[]
  activities       UserActivity[]
  stories          Story[]
  following        UserFollowers[] @relation("Following")
  followers        UserFollowers[] @relation("UserFollowers")
  sentMessages     Message[]       @relation("SentMessages")
  receivedMessages Message[]       @relation("ReceivedMessages")
  conversations    Conversation[]  @relation("UserConversations")
  blockedUsers     Block[]         @relation("BlockedUser")
  blockingUsers    Block[]         @relation("BlockingUser")
  tags             Tag[]           @relation("TaggedUsers")
}

model Post {
  id              Int        @id @default(autoincrement())
  creationDate    DateTime   @default(now()) @db.Timestamp(6)
  disableComments Boolean    @default(false)
  likes           Int        @default(0)
  userId          Int
  description     String
  image           String?
  comments        Comment[]
  postLikes       PostLike[]
  stories         Story[]
  tags            Tag[]
  user            User       @relation(fields: [userId], references: [id])
}

model Tag {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now()) @db.Timestamp(6)
  taggedUserId Int
  userId       Int
  postId       Int?
  commentId    Int?
  storyId      Int?
  user         User     @relation("TaggedUsers", fields: [taggedUserId], references: [id])
  post         Post?    @relation(fields: [postId], references: [id])
  comment      Comment? @relation(fields: [commentId], references: [id])
  story        Story?   @relation(fields: [storyId], references: [id])
}

model Comment {
  id           Int           @id @default(autoincrement())
  creationDate DateTime      @default(now()) @db.Timestamp(6)
  likes        Int           @default(0)
  postId       Int
  userId       Int
  content      String
  commentLikes CommentLike[]
  tags         Tag[]
  post         Post          @relation(fields: [postId], references: [id])
  user         User          @relation(fields: [userId], references: [id])
}

model CommentLike {
  id        Int     @id @default(autoincrement())
  commentId Int
  userId    Int
  comment   Comment @relation(fields: [commentId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
}

model PostLike {
  id     Int  @id @default(autoincrement())
  postId Int
  userId Int
  post   Post @relation(fields: [postId], references: [id])
  user   User @relation(fields: [userId], references: [id])
}

model UserFollowers {
  id            Int  @id @default(autoincrement())
  userId        Int
  relatedUserId Int
  relatedUser   User @relation("Following", fields: [relatedUserId], references: [id])
  user          User @relation("UserFollowers", fields: [userId], references: [id])

  @@unique([userId, relatedUserId])
}

model Message {
  id             Int           @id @default(autoincrement())
  creationDate   DateTime      @default(now()) @db.Timestamp(6)
  senderId       Int
  recipientId    Int
  content        String
  conversationId Int?
  sender         User          @relation("SentMessages", fields: [senderId], references: [id])
  recipient      User          @relation("ReceivedMessages", fields: [recipientId], references: [id])
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  storyReplies   Story[]       @relation("StoryReplies")
}

model Conversation {
  id           Int       @id @default(autoincrement())
  name         String
  messages     Message[]
  participants User[]    @relation("UserConversations")
}

model Notification {
  id           Int              @id @default(autoincrement())
  creationDate DateTime         @default(now()) @db.Timestamp(6)
  read         Boolean          @default(false)
  userId       Int
  message      String
  type         NotificationType
  user         User             @relation(fields: [userId], references: [id])
}

model UserActivity {
  id           Int              @id @default(autoincrement())
  creationDate DateTime         @default(now()) @db.Timestamp(6)
  userId       Int
  entityId     Int
  activityType UserActivityType
  user         User             @relation(fields: [userId], references: [id])
}

model Block {
  id            Int  @id @default(autoincrement())
  userId        Int
  blockedUserId Int
  user          User @relation("BlockingUser", fields: [userId], references: [id])
  blockedUser   User @relation("BlockedUser", fields: [blockedUserId], references: [id])
}

model Story {
  id             Int       @id @default(autoincrement())
  creationDate   DateTime  @default(now()) @db.Timestamp(6)
  viewCount      Int       @default(0)
  userId         Int
  postId         Int?
  image          String?
  expirationDate DateTime?
  tags           Tag[]
  user           User      @relation(fields: [userId], references: [id])
  post           Post?     @relation(fields: [postId], references: [id])
  replies        Message[] @relation("StoryReplies")
}

enum NotificationType {
  LIKE
  COMMENT
  FRIEND_REQUEST
}

enum UserActivityType {
  POST_CREATED
  COMMENT_ADDED
  FRIEND_REQUEST_SENT
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
